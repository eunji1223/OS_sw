shell | 셸
- 리눅스 커널과 사용자를 연결해주는 인터페이스
- 사용자의 입력 알고 해석하고 프로그램 실행함
- "셸 스크립트" : 일련의 명령어를 한 파일에 담아놓은
- 리눅스 운영체제의 표준인 bash(bourne again shell)

문법
<프로그램 명> <내용>
echo: 쉘 명령, 내장명령, 프로그램
- 화면에 출력하는 명령

- 변수를 내용에 넣을 수 있다.
  * 스페이스 주의할 것
  * ""는 사용해도 되고 스페이스 없으면 없어도 됨
  * 변수를 사용할 때에는 \$ 기호 사용한다.
  * 내장된 변수도 존재한다. 이것들은 대문자로 지정되어 있다.

- 명령의 특징
  * 한 프로그램이 한 가지 일만 한다.
  * 명령의 조합을 잘 해야 한다.

- 명령
  * 프로그램 자체
  * 단순 명령(simple command) : 프로그램 + 내용
  * 결합 명령(combined command) : 프로그램 + 옵션 + 내용 
  => 프로그램 구체화하는 역할
  => '-h'
  => 명령인자(검색은 man <알고자하는 옵션의 명령>)

  * ls : list
  * cd : change directory => cd /os

  * 파이프
  => |
  => 명령형 | 명령형
  => less
  => 이전 명령형의 출력값을 다음 명령행의 입력값으로 보내는 역할
  'echo $PATH | less'

  => 파이프라인: 파이프로 연결한 명령행

  * wc, head, cut, grep, sort, uniq

- 입력
  * stdin : standard input/in, 표준 입력
  * 프롬프트를 통해서 입력되는 입력스트림

- 출력
  * stdout : standard output/out, 표준 출력
  * 출력 스트림


@@ 문제 '/bin' 하위디렉토리를 라인별로 출력하라.
  => ls -l /bin


1. wc
  - 파일 내용의 줄(line) 수, 단어(word) 수, 문자(character) 수 출력하는 명령
  - wc로 이 파일의 내용 출력하기 => wc w1.txt
  - 지금 디렉터리의 하위 디렉터리 내용의 줄 수, 단어 수, 문자 수 출력하라. => 1. 하위 디렉토리 조회 => ls | wc / ls -l | wc

  - 명령인자
  * -w
  * -l
  * -c

  - ex1) txt 단어 몇 글자인지 세어보자 => wc -w w1.txt
  - ex2) /bin 파일+디렉터리 갯수 몇 개인지 => ls -l /bin | wc -l

2. head
  - 파일의 n째줄 내용을 화면에 출력하는 명령
  - '-n숫자' : head -n3(default=10)
  - 파일이 90줄 -n100

  - ex1) 이 파일의 1번째 줄 단어 수, 글자 수 세기 => head -n1 w1.txt | wc -w -c(-wc)
  - ex2) /bin 파일 중에서 앞에 5개만 출력하기 => ls /bin | head -n5

3. cut
  - 파일의 내용 중에서 특정 일만 출력하는 명령
  - 범위 지정 방법:
  * \t : -f
  James \t 34

  cut -f1 name.txt
  cut -f3,5,6
  cut -f3-4

  - ex1) animal.txt에서 3번째 field 조회 => cut -f3 animal.txt
  - ex2) animal.txt에서 1번째 field 조회하는데 첫번째 줄만 나오도록 => cut -f1 animal.txt | head -n1

  * -c : character
  cut -c5 name.txt
  cut -c-5 name.txt
  cut -c1,5,6

  - ex3) animal.txt에서 1필드의 마지막 글자 출력하기 => cut -f1 animals.txt | rev | cut -c1
  * -d<구분자>
  - ex4) animals.txt에서 4번째 필드: Lutz, Mark에서 Lutz 줄만 출력하기(모든 last name만 가져오기) => cut -f4 animals.txt | cut -d, -f1


===========================2024. 03. 18============================

4. grep
  - 문자열 matching
  - 대소문자 구분함
  - 라인 전체를 출력한다.
  - 전체 text에서 뭔가를 찾고 싶을 때, 사용
  
  * 모든 파일에서 전체 조회하라: *
  * -v : 조건 문자열이 없는 라인을 출력한다. 
  
  - ex1) The가 있는 txt 파일을 전체 조회하라. 
   => grep The *.txt
  - ex2) /usr/lib에 포함된 하위 디렉터리 개수 알아내기(drwxrwxrwx에서 d는 directory임.) 
   => ls -l /usr/lib | cut -c1 | grep d | wc -l

5. sort
  - 정렬, 오름차순(abcd...)
  
  * -r: reverse, 반대로 정렬
  * -n: 숫자 정렬
   ex) sort -n sample.txt
       sort -n -r sample.txt
       sort -nr sample.txt
       
  - ex1) animals.txt 3번째 필드가 숫자인데 이를 오름차순 정렬해서 출력하자. 
   => cut -f3 animals.txt | sort -n
  - ex2) ex1 진행 후 최소값, 최대값 출력하기 
   => 최소 : cut -f3 animals.txt | sort -n | head -n1
   => 최대 : cut -f3 animals.txt | sort -n -r | head -n1

  - ex3) /etc/passwd 디렉터리에서 사용자 이름 정렬하여 추출하기
   => head /etc/passwd | cut -d : -f1 | sort
   + 전체 출력하기: cut -d : -f1 /etc/passwd | sort
  - ex4) 사용자 중 root가 있는지 확인하기
   => head /etc/passwd | cut -d : -f1 | sort | grep root
   => head /etc/passwd | grep root
   => head /etc/passwd | cut -d : -f1 | grep root가 맞는 듯
   => 혹은 cut -d : -f1 /etc/passwd | grep root도 맞는 듯
   + 대소문자 구분되기 때문에 Root, root, ROOT 모두 다름
   + root 'abcdroot'도 인식
   + _root_ => -w : root, broot, bayroot, rootfile, ...에서 구분
   + -w: 전체 단어를 일치시키는데 사용한다.
   => grep root test.txt 시에는 root가 root, broot등 모두 출력되지만 grep -w root test.txt 시에는 root만 출력된다.
  - ex5) ls, head: ls와 head의 차이는 ls는 파일, 디렉터리 목록을 조회하는 것이고 head는 파일의 내용을 보고자 하는 것.

6. uniq
  - 중복된 문자열을 제거해서 보여주되, 인접한 중복 문자열만

  * -c: 중복된 특정 문자열이 몇 번 중복되는지 조회

  - ex1) 성적표(grades 파일)에서 가장 빈번하지 않은 등급부터 출력하기
   => sort -r grades | cut -f1 | uniq -c | sort -n
   => cut -f1 grades | sort -r | uniq -c | sort -n
   => cut -f1 grades | sort | uniq -c | sort -n(숫자별로 분류하기 때문에 앞에서 reverse 해주지 않아도 됨)
      or sort(해도 같은 결과가 출력되나 이는 숫자가 아닌 A/B 문자열로 분류됐다고 예상됨)

-----------------------------------------------------

#1. 버전 관리
 - 파일의 변화를 시간에 따라 저장했다가 나중에 특정 시점의 버전으로 다시 꺼내올 수 있는 시스템
 - 협업
 - 툴 : 깃

#2. 깃
 - 데이터 저장 방식: 스냅샷
 - 오프라인
    - if 빈 -> 텍스트 입력 -> 빈 파일
    - 키(key) - 벨류(value)
      - 키는 고유하다. (해시)
      - 벨류 (텍스트)
      
 - 깃 상태
    - 수정: 파일이 변경된 상태
    - 커밋: 저장
    - 스테이지: 스냅샷 찍어서 커밋할 준비가 된 상태

    - 수정
    - 스테이징 -> 커밋

 - 깃 커밋 순서:
    - 상태 체크 -> (수정) -> 스테이징 -> 커밋
    ...
    
 1) 깃 버전 체크
  git --version
    * git -v / --version

 2) 사용자 정보 설정하기
 - name -> git config --global user.name (이름)
 - email -> git config --global user.email (이메일)

 - core.editor
   - 
   - vi 빠져나올 때는 : q + enter

 - git help <프로그램명>

 # 디렉터리(directory)
  - 현재 디렉터리 : working directory, current directory
  - 우리가 말하는 '폴더'
  - 트리구조를 가진
    animals/
      ㄴ name.txt
      ㄴ age.txt
      mammals/
        ㄴ cow.txt
      reptile/
        -
  - 하위 디렉터리 (child) - animals > mammals
    name.txt -> 파일
  - 상위 디렉터리 (parent) - mammals > animals
  - 형제 디렉터리 (sibling) - mammals, reptile

  - /로 구분함
    animals/mammals/cow.txt
    <디렉터리 / .... / 파일명>
  - / : 루트 디렉터리

  - 절대경로: 루트에서부터 시작
  - 상대경로: 현재 기준
    - 나의 현재 위치가 mammals이다. 근데 위로 가고싶다.
      1) 절대경로 : /.../mammals
      2) 상대경로 : ..
         .. : 부모 디렉토리
         . : 현재 디렉토리
    - cd : change directory

    ex) cd ./mammals : 현재 디렉토리 안 mammals로 이동

  - pwd, cd
  - .., .
  - mkdir: 경로 만들기

  ex1) new_dir로 이동해서 디렉터리 "new_dir2" 만들어보기
    => cd new_dir > mkdir new_dir2

  3) 깃 초기화
    git init: .git에 모든 변경사항(스냅샷)이 저장이 된다.

  4) 상태 체크
    git status

    깃이 모르는 파일일 경우
      untracked -> 'add' -> tracked
      add -> commit

      [main (root-commit) bb5c3ca] initial commit - animal[[Os.txt]]
      1 file changed, 7 insertions(+)
      create mode 100644 animals.txt

      - branch 정보: main
      - (root-commit) : 초기 커밋
      - bb5c3ca : 고유한 해시 값
      - initial commit : 입력한 commit msg
      - animals[[Os.txt]] : 커밋에서 변경된 파일 혹은 디렉토리이다.
      - 1 file changed, 7 insertions(+) : 1개 파일 변경, 7줄 추가 됨을 알리는 메시지이다.
      - create mode 100644 animals.txt : 새 파일이 생성되었으며 파일의 권한을 나타낸다. 따라서 변경된 파일에 대한 모드 변경을 나타낸다.


===========================2024. 03. 25============================

    ex1) grades에서 A,B,C 알파벳 중복 없이 정렬해서 출력하는 코드 보내기. => cut -f1 grades | sort | uniq
    ex2) sort -n : string -> num
        string으로 인식될 시 -> 1, 11, 111, 2
        num으로 인식될 시 -> 1, 2, 11, 111

  5) 깃 추가
    - 여러 파일을 한번에 스테이징하기
      git add .
    - git commit -> txt
      git commit -m "your msg"
    - 매 수업에 커밋으로 파일을 저장하는 연습하기

  문서 편집기
  - vi, vim, emacs, notepad++, ...
  - "vi" sual editor
    - vim - vi improved (정규표현식, ... )
  - 문서 편집기는 프롬프트에서 파일을 직접 편집할 수 있게 해주는 툴
  - 특징
    - 화면 단위 편집기: 원하는 줄을 찾아 편집이 가능하다.
    - 유닉스 계열에서 가장 많이 사용함
    - 텍스트 편집 기능만 제공함
    - "less"
    - 모드 : 일반모드 <-> 입력모드 <-> 명령모드
      - ESC로 모드 전환
      - 명령모드 : 파일 저장, 덮어쓸건지, 빠져나갈 건지 등
        - wq + enter / wq! + enter : 저장 및 빠져나가기
      => vi로 파일 열기 -> 입력 모드 -> ESC -> 빠져나가기
      - 입력모드 : 
        - i : 현 커서에서 입력
        - a : 현 커서에서 한 칸 뒤에서 입력
        - o : 한 줄 추가 후 입력

      ex1) 파일 아무거나 열어서 수정하고 저장하고 나오기

      - set -o vi
        - vim 라인에서 엔터

----------------------------------------------------------------------

# 패턴 매칭
  - 프롬프트에서 셸, 프로그램이 작동한다.
  - 프롬프트는 우리가 명령을 실행하는 곳
  - 셸은 사용자와 리눅스 운영체제를 연결해주는 매개체
  리눅스(Linux) - 셸(Shell), 프롬프트(Prompt) - 사용자(user)
  - 셸의 역할은 명령 실행, 와일드카드, 파이프라인 처리한다.

  grep Linux *.txt
  shell이 *.txt를 sample.txt, a.txt, .....로 바꾼다.
  => 셸이 패턴매칭을 처리하여 결과물을 프로그램에 보낸다.
  head xxx | grep | ...
  => 파이프라인을 보내는 것도 셸이 하는 역할

  - *
    - zero or more
    - *.txt : .txt, animals.txt, test.txt, ...모두 가능 but a.txtt는 불가
              확장자 패턴이 동일해야 한다.
    - 0개 이상의 연속열과 일치하는

  - ?
    - 1개 매칭
    만약 파일이 ch1 ch2 ch3 ... ch100까지 존재할 때,
      grep Linux ch? # 한 자리 수만 매칭

  - [ ]
    - 대괄호 안에 열거되어 있는 것 중 일치하는 문자열 1개 있을 때
    grep Linux ch[12345] # 12 (x) 123 (x)
    grep Linux ch[1-5]

  ex1) 짝수로 끝나는 모든 파일 => grep Linux ch*[24680]
  ex2) 대문자로 시작하고, 언더스코어 포함되어 있는 파이썬 파일 매칭 => [a-z] [A-Z] .py
  => ls [A-Z]*_.py # name_lee.py (X)
  => grep Linux [A-Z]*_*.py
  ex3) /etc 디렉터리 안에 파일 확장자가 .conf인 파일 목록 조회하기
  => ls /etc/*.conf
  => ls /etc | grep .conf (X)

  - 매칭되는 파일이 없으면 에러
    ls *.doc => 파일 없으면 No such file or directory 오류
  - 디렉토리 경로, 파일명

# 변수 평가
  - "평가" : 변수를 리터럴 값으로 치환하여 값을 평가함.
  $VAR - 이미 지정된 변수
  $var - 사용자가 지정하는 변수
    ls $var
      -> var = ./notes/w3.txt
    ls ./notes/w3.txt
  - $HOME - 루트 디렉터리 => printenv HOME
  - $USER - 사용자명  => printenv USER

  - echo
  - printenv

  ex1) echo my directory is $HOME시, 변수와 함께 사용이 가능하다.

  - 변수 설정하기
    name=lee
    - 공백이 없어야 함
    - 변수=값
    - 변수를 사용하려면 앞에 "$변수명"

  ex2) age 라는 변수에 자신의 나이를 담고 "내 나이는 ...살이다"를 변수를 이용해 출력하시오. => age=값 / echo 내 나이는 $age살이다.

  - dir1=$HOME/notes/chapter1을 저장을 하면 $dir1으로 사용이 가능하다.
  - cd $dir1 시, 경로 입력하지 않아도 이동이 가능하다.

# 패턴과 변수
  mammals
    ㄴ lizard.txt
    ㄴ snake.txt
  reptiles
  mv <from> <to> : from에서 to로 이동
  ex1) mammals안에 있는 txt 파일을 reptiles로 이동하려한다.
    # 변수에 담아서 이동시키려면?
      => div1=mammals/*.txt
         mv $dir1 reptiles
      => div2="lizard.txt snake.txt" - 는 불가. 하나로 인식함
      
    # 패턴매칭으로 이동시키려면?
      => mv mammals/*.txt reptiles

# alias
  - 단축어를 별명으로 설정하기
  - alias uniqc="uniq -c"
    uniqc | ...
  - removeal="rm -r"처럼 별명 설정 가능

  - shadowing
    alias grep="grep Linux *.txt"
    alias ls="ls -l"
    원래 있는 것도 바꾸기 가능. 변경했을 시에는 바꾼 것 우선으로

  - unalias
    unalias uniqc로 별명 변경 가능
      
    