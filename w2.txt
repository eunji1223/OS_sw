~5장 각자 공부, 오늘 배우는 부분 참고는 7장

# 변수
  - 선언
    var="contents"
    ex) var=kim
        var=" kim lee hong" --> 공백이 있으면 ""이용
    * '=' 앞 뒤로 공백이 없어야 한다.
    * 데이터 타입이 없음. 모두 문자열로 인식이 된다.
  - 사용
    echo $var
    - 셸이 값을 치환한다.
    - 선언할 때 처리하지 않고 프로그램 구동 시 처리
  - [a-zA-Z_0-9]*

  ## 할당
    - 프로그램 이름, 옵션도 변수로 받을 수 있다.
      ex) command=wc
          op=-c
          $command $op animals.txt
    - 다른 변수도 새 변수로 할당할 수 있다.
      ex) var=value
          var2=$var
          echo $var2
    - 선언하지 않은 변수: 셸에서 null값 설정됨
      (보통의 프로그램에선 오류, 셸에선 오류나지 않음*)
      * 명령 라인에 넣어도 무시됨

  ## null
    - var=
    - var=""
    - var=''
    위는 모두 null값들
    (var=' ' // 공백 1개 있는 것으로 null이 아님)



# 변수 활용하기
  - file=grades --> grades1
    변수 이름을 grades로 바꾸고 싶을 때,
    file=grades1로 하기 보다는 다른 방법이 존재
  - '${변수}' 구조
    ex) ${file}1

  Q. grades -> grades1 파일명 변경하기
    => file=grades
       mv $file ${file}1
       ($file1은 또다른 변수이다.)

  ## substring 추출하기
    - animals.txt -> animal.md
    - ${var:start:size}
    - ${var:10:4} // 10번째 offset부터 4개(14번째까지)

  Q. animals.txt -> animal.md로 바꿔서 저장하기
    => file=animals.txt
       mv $file ${file:0:7}.md

  ## $(( 변수 )) 구조
    - 수학 연산을 가능하게 하는 구조
      ex) echo $((1+2))
          echo $(( 1 + 2 ))
          four=4
          echo $(( four + 8 ))
    - 숫자 문자열이 들어왔을 때, 숫자로 인식함

    Q. 5를 변수에 담고 활용해서 15를 변수에 담아보라.
       (5를 사용해 15가 담긴 변수를 만들어라)
       => num=5
          numadd=$(( num+10 ))
          echo $numadd
    - $((ten = ten + 1))도 가능
      => 선언하지 않은 변수가 초기값 0값으로 설정되어 0+1=1로
    - 초기값 0

    - 비교 연산
      $(( ten > 0 )) // 1 == True, 0 == False

    Q. 임의의 수 num이 2의 배수인지 확인하는 코드 작성하기
      => num=4
         echo $(( num%2==0 ))

  ## $() vygus
    - 명령의 결과값을 변수에 담고 싶을 때
      ex) result=$( cat /etc/passwd | cut -d : -f1 )



# 스크립트 파일 작성하기
  - 파일 확장자는 .sh or none(없어도 script로 인식이 됨)
  1) 파일을 실행가능한 상태로 바꾼다.
     chmod +x ex1 ==> ./ex1
  2) 실행하기
  - 주석은 #
    echo hello world#주석 --> 주석으로 인식이 안됨
    echo hello world #주석 --> 뛰어써야

  + vi로 들어간 파일 안 
    '#!/bin/bash'를 적음 -> file이 bash로 돌아감을 알려줌



# 인수

  ## 위치 인수
    * vi script 안 내용
      echo $1 $2
    * 셸
      echo ./ex1 myname yourname
      => myname yourname

    - $n(-9)
    - 외부에서 인수를 받아와서 사용할 때
    - ${10} : 10 이상일 때

  ## $#
    - 총 인수 개수
      * vi script 안 내용
        echo $# or echo "$#"('$#'는 모든 기능 해제함.)
      * 셸
        echo ./ex1 myname yourname
        => 2
    - 큰 따옴표로 인수 감싸는 습관 들여야 함

    Q. 디렉토리를 인수로 받아서, 파일과 디렉토리 개수를 세는 스크립트 짜기
      - 파일명: count

      - 출력 -
      현재 위치: ...
      파일 ...개, 폴더 ...개 입니다.

      - 테스트케이스
      test case 1: .
      test case 2: *
      
      => 틀린 예(.과 *의 결과가 다름)
        * vi script(vi count) 안 내용
          #!/bin/bash
          file=$(ls -l $1 | cut -c1 | grep -v d | wc -l)
          folder=$(ls -l $1 | cut -c1 | grep d | wc -l)
          echo "현재 위치: $1"
          echo "파일 $file개, 폴더 $folder개입니다."
         
        * 셸 내용
          vi count
          --------------(script 작성)
          chmod +x count
          ./count .
          ./count *

      ==> 교수님도 해결 못함. ./count "*"로 하면 가능은 함
      ==> ""로 dir($1 지정한)변수 감싸야 한다 => 추후에

  ## $*
    - 모든 인수를 출력해주는 변수

    Q. 전화번호부 관리 스크립트 만들기
      1) 검색
        ./book.sh 이름

        => search_result=$(grep -iw $* book.txt)
           echo $search_result

           name="$1"
           grep $name ./notes/book.txt

           name="$1"
           grep "$name" ./notes/book.txt
           
      2) 추가
        이름, 번호를 인자로 넣어 추가하기
        
      3) 삭제
        이름으로 검색해서 이름, 번호를 삭제하기


===============05.13=========================

# 마크 다운(markdown language) - 깃허브 해야해서 배우는
  - 마크업 언어 중 하나
  - txt 파일 차이점은 포매팅(코드 쳤을 때, 색이 포함되는)이 들어가는 것
  - 언어에 규칙이 있고 이를 html로 전환하여 화면에 보여지는 방식
  - 확장자는 .md, .markdown

  ## 장점
    - 간결하다
    - 도구없이 사용이 가능하다.(플랫폼에서만 이뤄지는 언어가 아닌 언어 서포팅하는 플랫폼에서 모두 사용이 가능하다)
    - 용량이 적다.(어떤 방식으로만 텍스트를 구성하면 되기 때문)
    - 버전 관리도 쉽다
    - 지원하는 애플리케이션이 많다.

  ## 단점
    - 표준이 없다.

  ## 프로세스
  파일 생성 -> 플랫폼에 파일을 변환 -> html 읽고 -> 렌더링된 결과물 보여줌
    - 마크다운 프로세스, 파서 등으로 부른다.

  ## 기본 문법
    1. headings

      - # + ' ' : heading 1(#과 한 칸 공백)
      - ## + ' ' : heading 2
      - ### + ' ' : heading3
      - # 다음에 항상 한 칸 띄어야 한다.
      - 한 줄 개행 들어가야 한다.(깃허브에서)
        ex) # 타이틀

              - 본문 
              ...
              
    2. 문단(paragraph)
      - 한 줄 개행
        ex)
          이것은 문단입니다.
      - 들여쓰기 하면 안됨(인식이 안됨, 문단으로서의 기능이 없어짐)

    3. line breaks
      - 공백 2개 이상 넣고 엔터(개행이 됨)
      - 눈에 보이지 않기 때문에 불편함
        => 프리뷰랑 비슷하게 보이기 위해 무방비하게 엔터 남용하지 말 것
      - '<br>' 태그를 지원하는 플랫폼이 존재

    4. 강조하기
      1. bold
        - '**' 사용한다.(혹은 '__'도 가능)
          - 언더바는 단어 중간에 사용할 경우 인식되지 않음
        - 강조하고 싶은 부분 **앞뒤로** 감싼다
        
      2. italic
        - '*', '_' 1개로 사용
        - 나머지는 동일함
        
      3. bold + italic
        - '***', '___' 3개로 사용
        - 언더바 한계 동일함
        - '**_', '__*' 가능함

    5. 인용구
      - '>' 사용한다.
      - '>' 블록으로 표현되는 블록은 전부 인용구
      - '>>' 중첩 인용(nested quotes)

      - 인용 안에 다른 요소 넣을 때 (문제 없음)

    6. 리스트
      1. 순서가 있는 리스트
        - 숫자 + '.' 문단이 시작됨
        - 숫자에 상관없이 순서가 매겨진다. (1, 2, 3, 1, 1, 1 => 1, 2, 3, 4, 5, 6)
        + 숫자 + ')'는 플랫폼마다 다르다.

      2. 순서가 없는 리스트
        - '대시(-)', '*', '+' 기호 등을 사용하여 목록화한다.
        - 혼합해서 사용하는 것 주의(- * +, replit에서는 가능)
          => 한 가지만 택해서 사용하는 것 추천

      3. 중첩 리스트
        - 탭으로 구분한다.
          ex) * 과일
                1. 사과
                2. 배
                3. 감
      
      + 기능을 해제하고 싶다면? '\(escape letters)' 사용한다.

      4. 리스트 중간에 요소 삽입하기
        - 들여쓰기 하고 요소를 넣는다. (보통은 tab을 넣어야 함, replit은 그렇지는 x)
        - 앞뒤로 개행 넣는 습관

      Q. 강의자료 마크다운 실습(처음부터 feature까지 만들기) => lecture_test.md


    7. 코드 블록
      - 라인 내부: `code_block`(backtick) 사용한다.
        - 코드 안에 백팃이 있으면, ``code_block``

      - 라인 외부
        - 모든 라인을 탭한다.
        - 탭하고 싶지 않다면, ```를 사용한다.
          - 언어를 명시할 수 있음(python, sh)

    8. 선 긋기
      - '***'
      - '___'
      - '---'
      
      - 앞뒤로 개행해주는 것이 좋다.

    9. 링크 삽입하기
      - 일반적인 방식:
        '[텍스트](url 주소 "title도 설정 가능")'

      - 단순한 방식: 
        <url>
        - 플랫폼에 따라 이메일을 자동으로 인식할 수도 있다(replit)
        - 기능을 해제하려면? '`'사용(github에서는 가능, replit에선 가능한 것 같긴 한데..)

      - 링크도 포맷팅 가능함
        - bold, italic 등 모두 가능하고
        - 공백 주의 **_ _**

        Q. 코드에 링크를 걸고 싶다.
          this is python code
          - github.com 걸기
          => this is python [`code`](url)

        1. 출처 표기식 링크 걸기
          - 레퍼런스 모으기 위한 방법
          - 본문 내부 / 레퍼런스
            [text][label] or [text] [label]
            [label]: url
            - 콜론 다음에 공백 필수
            ex) (본문 내부)
                이것은 [사과][1] 입니다. 
                (레퍼런스 부분)
                [1]: www.wikipedia.com
              => replit에서는 불가, github에선 가능
          - 레이블은 글자, 숫자, 공백, 기호 가능함
            ex) 이것은 [배][pear]입니다.
                [pear]: www.wikipedia.com
          - url은 '<', '>' 감싸도 된다.(""도 가능, 없어도 된다)
          - 본문에 레퍼런스 부분이 나타나지 않는다.

    10. 이미지
      - 구조: ![text][img_path "title"]
      - title은 옵션(필수x)
      - 이미지 자체에 링크 삽입
        [![text][img_path "title"]](url)

    11. 표
      - 열(|)과 행(-)
      - 행이 생성이 되면 표가 만들어짐(- 3개 이상)
        ex) |제목1|제목2|
            |---|---|
            |이름||
            |학번||
            |나이||
      - 정렬
        - 왼쪽, 오른쪽, 가운데
        - 행 부분에 ':' 삽입한다.
      - 셸 내부에서도 다른 문법을 사용할 수 있다.(코드블록은 제외)

    # 확장 표현

    12. 각주(footnote) 달기
      - 텍스트 내부에서 윗첨자로 각주 표시하기
      - 본문 내부/ 각주 부분
        ex) text[^1]
            [^1]: This is footnote 1.
      - 각주 부분은 텍스트 어디에나 위치할 수 있음
        - 화면 하단에 존재한다.
        - 표, 리스트 등등 안되는 기능 존재함.

    13. 기타 텍스트 강조
      1) strikethrough
        - 글자에 선 긋기
        - '~~' 앞뒤로 감싼다.

      2) 형광펜
        - '==' 앞뒤로 감싼다.
        (replit에서는 불가)

    14. 아랫첨자, 윗첨자
        윗첨자:
          - X^2^, '^'로 감싼다.
          (replit에서는 불가)
        아랫첨자:
          - H~2~0, '~'로 감싼다.

    15. 할 일 목록
      ex) - [X] todo1
          - [ ] todo2
          - [X] todo3

    16. emoji
      ex) :100:
          :smile:
          
        
    

      