#1. 총 정리
## programs

  - <프로그램><옵션><인수>
  - -ch
  - 디렉토리,...
  - ex) ls -l /etc/passwd

  1) date -> Mon 08 Apr 2024 12:41:08 AM UTC
  2) who #users/your_name(유저 이름 출력)
    - 로그인 유저 정보
    - replit에선 설정이 다르게 되어 있음
  3) echo
    - 공백 무시(hello    world -> hello world로 출력)
    - 변수 사용
  4) ls
    - 디렉토리 조회
    - '-l': 자세하게 설명
      - d로 시작하는 것이 디렉토리고 나머지는 모두 파일
    - '-a': 숨겨져있는 파일까지 보여줌
    - 멀티컬럼으로 stdout
    - 인수가 디렉토리
    - 인수로 파일 명 쓰면 이름 그대로 반환(grades -> grades)

  5) cat + 파일 1, 2, 3, ..., n
    - concatenate
    - 인수로 파일명
    - 파일 이어붙이기 가능(컨텐츠 확장할 때 사용한다.)
    - 작성한 순서대로 이어붙인다.

  6) wc
    - 라인, 단어, 글자 수 세기
    - '-l' : 라인
    - '-w' : 단어
    - '-c' : 글자
    - 인수가 없으면 stdin으로 받는다.
      ex) ~/OSfirst$ wc -l
         hello
         world
         ! -> ctrl + d
         3

    7) cp
      - copy fromA toB
      - 다른 디렉터리일 경우
        - 상대경로로 쓰는 게 편함
        - 같은 파일 명일 경우 이름 안 써도 됨
          ex) cp b ./notes
      - 여러 파일 복사 가능
        cp 1 2 3 4 5 6
        1-5가 from, 6 to
        - 마지막에 쓴 디렉토리 혹은 파일이 to가 된다.

      Q1. OSS에서 notes/b를 복사해서 가져오는 코드 작성하기
          runner(pwd)
           ㄴ OSS
              ㄴ notes
                  ㄴ b
          => cp ./OSS/notes/b .
          (cp 자체가 ls를 포함하고 있음)

    8) mv
      - move
      - mv fromA toB
      - mv 1 2 3 4 5 "6"
        1-5가 from, 6 to
      - 파일 명 변경할 때
        mv a aa //a 사라지고 이름이 aa로 바뀜
      - 디렉토리 A -> B

      *** 기존에 존재하는 파일명일 경우, 덮어쓴다.***

    9) rm
      - remove
      - 파일명
        - '-r': 모두 지울 수 있음.(디렉터리도 가능)
      - 여러 개 지울 수 있다.
        rm a b c d
        rm *.txt
      - 지운 파일을 다시 복원하는 기능은 없다.
        따라서 확인하고 지울 것
      
## 디렉토리 관련 명령
  1) pwd
    print working directory
          current directory
          
  2) cd
    change directory
    - .. : 부모 디렉터리
    - . : 현재 디렉터리
    - cd만 단독 사용 혹은 cd ~하면 home으로

    Q2.notes -> runner로 한번에 가는 방법
      => cd ../..

  3) mkdir
    make directory

  4) rmdir
    remove directory

  5) ln
    link files
    - ln fromA fromB
    - a, b
    - 메모리 효율, a와 b를 항상 동기화하고 싶을 때 사용
    - 목적: 다른 디렉토리에 동일한 파일을 위치시키고 싶을 때
    - ls -l로 확인 가능함
    - 원래 원본 파일은 '1'로 표시되나 연결된 파일은 '2'로 표시됨
     -rw------- '2' runner runner 325 Mar 11 02:12 
     - 파일 하나를 삭제해도 다른 파일은 삭제되지 않는다.

## 패턴매칭
  1. asterisk
    - "*"
    - zero or more
      cat * # 현재 디렉터리에 있는 모든 파일
      chapter* #chapter로 시작되는 모든 파일
    Q3. t가 들어있는 모든 파일
      => *t*
  2. ?
    - 한 개 매칭
      echo ? # 글자 1개로 된 파일 전부
      echo ?? # bb bb.txt

  3. [, ]
    - 특정 글자 1개 매칭되는 것 전부
      [abcd] 
      [02468] # 짝수
      [0-9] # 모든 숫자
      [a-z] # 모든 소문자

    Q3. o를 제외한 모든 소분자
      => [a-n, p-z]
         [a-np-z]
         [!o] #except

  4. Escape letter
    - 공백, $, ...
    - \
      cat file_a file_b
      cat hello\ world
      '', ""
    - echo는 예외(공백이랑 관련x)

    Q4. 'who are you?'라는 디렉토리를 생성하고 목록 조회하는 코드
      => mkdir 'who are you?'
         ls 'who are you?'
      => mkdir "who are you?"
         ls 'who are you?'
      => mkdir who\ are\ you?
         mkdir who\ are\ you\?
         ls 'who are you?'
      - '', "", \
      - file exists -> error

## 리다이렉션
  - 입력 <(덮어쓰기), <<(이어서 쓰기)
  - 출력 >
  - 에러 2
  - 표준 출력이랑 에러는 다른 통로로 이동한다.
    - "" > cp_pattern1

## 파이프라인
  - |
  - 표준 입출력을 이용하는 모든 프로그램은 파이프를 사용할 수 있다.
  - A | B | ...
  - "필터": 파이프라인을 사용할 수 있는, 입출력값을 수정할 수 있는 프로그램
  - grep, cut,

##
  - ; - 여러 명령 한 줄에 쓸 때
  - date; pwd

  - 오래 걸리는 명령 백그라운드로 보내기
    - <명령> &
      예: cat bigdat > file1 &
    - 다른 프로그램 동시에 수행 가능
    - stdin(조심)

  - ps
    - 프로세스 정보 나타냄
    - PID: id
    - TTY: 터미널 정보
    - time: 구동 시간
    - cmd - 프로세스 이름

## 명령 2
1. cut
  - cut <> 파일명
  - '-f': tab 구분
  - '-c': 글자 자르는 역할
  - '-d <구분자>'
    - -'d:'
      cut -d: -f1 file # f default is tab.

  Q5. 10번째 글자부터 끝까지
    => cut -c10- 파일

2. paste
  - cut과 반대됨
  - 컬럼별로 데이터 붙임
  - 디폴트는 탭
  - cat vs paste
    라인별로 vs 컬럼별로
  - '-d<구분자>' : 구분자 지정
  - '-s': 같은 파일을 수정할 경우
    ' ' -> \t
    paste -s -d' ' file
    paste -d: grades letters -> 컬럼으로

3. grep
  - grep <패턴><디렉터리>
  - 패턴에 매칭되는 문자열을 가진 라인 출력
  - 매칭 없으면 아무것도 출력되지 않는다.
    grep Linux * # 파일 내부의 텍스트
    ... | grep Linux # 출력에서 받는 입력값

    Q6. 전체 파일에서 *패턴 가진 것 찾기
      => grep \* .
         grep -w *
         grep \* *
         grep '*' *
         -> 안 되는 이유 찾기
      => 패턴은 ''를 사용하는 게 좋다
        [a-z]
        ^, $
        ^[A-Z]*
        *.txt$
    - '-i': 대소문자 구분 안 함
    - '-w': 정확한 매칭만
            the -> there(x)
    - '-v': 반대, 포함 안 되는
    - '-l': 해당 매칭이 있는 파일명

    Q7. 해당 매칭이 있는 파일 개수
      => grep -l 'A' * | wc -l

4. sort
  - 정렬
  - 라인별로, 오름차순 디폴트
  - '-r': reverse
  - '-n': 숫자로 인식
    - 셸은 모든 인수를 문자열로 인식한다.
      str : 1, 11, 2, 3
      int : 1, 2, 3, 11
  - 특수문자, 다른 언어 중에 특수 기호 사용하는 문자 정렬 순서 주의
    - ' ' #32, \ #..
  -'-u': sort + uniq
    sorting 후 중복을 없앤다.
  - '-o':
    - sort file1 > file1(x) 오류
    - 정렬된 결과물 같은 파일에 저장

5. uniq
  - 중복 삭제
  - 인접한 것만 고려한다.
  - '-d': uniq를 통해 인접한 중복을 삭제한 결과를 다시 중복된 것을 삭제하는(sort -u와 동일)
  - '-c': 중복된 횟수 카운트

6. tr
  - tr from_char to_char
  - tr e x file
    => 표준 입력(stdin)만 들어올 수 있다. 입력 리다이렉션을 사용해야함
  Q8. animals.txt에서 e를 x로 바꾸고자 한다.
    => tr e x < animals.txt
  Q9. animals.txt에서 소문자를 대문자로 바꾸고자 한다.
    => tr [a-z] [A-Z] < animals.txt
  - '-d': 삭제
    tr -d the => the가 삭제됨.
  
    
  
  
    

    
    